import { Component, Inject } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';

@Component({
  selector: 'column-selector-dialog',
  templateUrl: 'column-selector-dialog.html',
})
export class ColumnSelectorDialogComponent {
  constructor(
    public dialogRef: MatDialogRef<ColumnSelectorDialogComponent>,
    @Inject(MAT_DIALOG_DATA) public data: any
  ) {}

  toggleColumnVisibility(columnName: string) {
    this.data.columnVisibility[columnName] = !this.data.columnVisibility[columnName];
    this.data.updateDisplayedColumns();
  }
}


<h2>Select Columns</h2>
<mat-checkbox *ngFor="let column of data.columnDefinitions" [checked]="data.columnVisibility[column.columnName]"
  (change)="toggleColumnVisibility(column.columnName)">
  {{ column.displayName }}
</mat-checkbox>

import { MatDialog } from '@angular/material/dialog';
import { ColumnSelectorDialogComponent } from 'path-to-column-selector-dialog-component';

export class YourComponent {
  // ... Your existing code

  constructor(public dialog: MatDialog) {}

  openColumnSelectorDialog(): void {
    const dialogRef = this.dialog.open(ColumnSelectorDialogComponent, {
      width: '250px',
      data: {
        columnDefinitions: this.columnDefinitions,
        columnVisibility: this.columnVisibility,
        updateDisplayedColumns: this.updateDisplayedColumns.bind(this)
      }
    });

    dialogRef.afterClosed().subscribe(result => {
      console.log('The dialog was closed');
    });
  }
}

<button mat-button (click)="openColumnSelectorDialog()">Select Columns</button>

data-tabel
import { Component, Output, EventEmitter } from '@angular/core';

@Component({
  selector: 'app-data-table',
  // ... other component properties
})
export class DataTableComponent {
  @Output() openColumnSelectorDialog: EventEmitter<void> = new EventEmitter();

  // ... rest of the component logic

  openDialog() {
    // Emit the event to notify the parent (dashboard) to open the dialog
    this.openColumnSelectorDialog.emit();
  }
}

dashboard---
import { Component } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { DataTableComponent } from 'path-to-data-table-component';

@Component({
  selector: 'app-dashboard',
  template: `
    <!-- Your dashboard content -->
    <button mat-button (click)="openColumnSelectorDialog()">Select Columns</button>

    <app-data-table (openColumnSelectorDialog)="openColumnSelectorDialog()"></app-data-table>
  `,
})
export class DashboardComponent {
  constructor(public dialog: MatDialog) {}

  openColumnSelectorDialog(): void {
    const dialogRef = this.dialog.open(ColumnSelectorDialogComponent, {
      width: '250px',
      // ... other dialog configuration
    });

    dialogRef.afterClosed().subscribe(result => {
      console.log('The dialog was closed');
    });
  }
}

import { Component, OnInit } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { DataTableComponent } from 'path-to-data-table-component';
import { ColumnSelectorDialogComponent } from 'path-to-column-selector-dialog-component';

@Component({
  selector: 'app-dashboard',
  template: `
    <!-- Your dashboard content -->
    <button mat-button (click)="openColumnSelectorDialog()">Select Columns</button>
    <app-data-table [columnDefinitions]="columnDefinitions" [rowData]="rowData"></app-data-table>
  `,
})
export class DashboardComponent implements OnInit {
  constructor(public dialog: MatDialog) {}

  columnDefinitions: ColumnDefinition[] = [
    // Define your column definitions here
  ];

  rowData: any[] = [
    // Define your row data here
  ];

  openColumnSelectorDialog(): void {
    const dialogRef = this.dialog.open(ColumnSelectorDialogComponent, {
      width: '300px',
      data: { columnDefinitions: this.columnDefinitions },
    });

    dialogRef.afterClosed().subscribe((selectedColumns: string[]) => {
      if (selectedColumns) {
        // Update column visibility in your data-table component
        this.columnDefinitions.forEach((column) => {
          column.hidden = !selectedColumns.includes(column.columnName);
        });
      }
    });
  }
}

import { Component, Input, OnInit } from '@angular/core';

@Component({
  selector: 'app-data-table',
  template: `
    <!-- Your DataTable content -->
    <table mat-table [dataSource]="rowData">
      <!-- Loop through columnDefinitions and use *ngIf to control visibility -->
      <ng-container *ngFor="let column of columnDefinitions">
        <ng-container [matColumnDef]="column.columnName" *ngIf="!column.hidden">
          <th mat-header-cell *matHeaderCellDef>{{ column.displayName }}</th>
          <td mat-cell *matCellDef="let row">{{ row[column.columnName] }}</td>
        </ng-container>
      </ng-container>
      <!-- ... Rest of your DataTable code -->
    </table>
  `,
})
export class DataTableComponent implements OnInit {
  @Input() columnDefinitions: ColumnDefinition[] = [];
  @Input() rowData: any[] = [];

  ngOnInit() {
    // Perform any necessary initialization for your DataTable
  }
}
import { Component, Inject } from '@angular/core';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';

@Component({
  selector: 'column-selector-dialog',
  template: `
    <h2>Select Columns</h2>
    <mat-checkbox
      *ngFor="let column of data.columnDefinitions"
      [(ngModel)]="selectedColumns"
      [ngModelOptions]="{ standalone: true }"
      [value]="column.columnName"
    >
      {{ column.displayName }}
    </mat-checkbox>
    <button mat-button (click)="closeDialog()">OK</button>
  `,
})
export class ColumnSelectorDialogComponent {
  selectedColumns: string[] = [];

  constructor(
    public dialogRef: MatDialogRef<ColumnSelectorDialogComponent>,
    @Inject(MAT_DIALOG_DATA) public data: any
  ) {}

  closeDialog() {
    this.dialogRef.close(this.selectedColumns);
  }
}


// column-visibility.service.ts

import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';

@Injectable({
  providedIn: 'root',
})
export class ColumnVisibilityService {
  private columnVisibilitySubject = new BehaviorSubject<any[]>([]);
  columnVisibility$ = this.columnVisibilitySubject.asObservable();

  updateColumnVisibility(columns: any[]): void {
    this.columnVisibilitySubject.next(columns);
  }
}


// dialog.component.ts

import { Component, Input } from '@angular/core';
import { ColumnVisibilityService } from './column-visibility.service';

@Component({
  selector: 'app-dialog',
  template: `
    <div *ngFor="let column of columnDefinitions">
      <label>
        <input type="checkbox" [(ngModel)]="column.isShow" (change)="onCheckboxChange()">
        {{ column.displayName }}
      </label>
    </div>
  `,
})
export class DialogComponent {
  @Input() columnDefinitions: any[] = [];

  constructor(private columnVisibilityService: ColumnVisibilityService) {}

  onCheckboxChange(): void {
    // Emit the updated columnDefinitions when a checkbox changes
    this.columnVisibilityService.updateColumnVisibility(this.columnDefinitions);
  }
}


// parent.component.ts

import { Component, OnInit } from '@angular/core';
import { ColumnVisibilityService } from './column-visibility.service';

@Component({
  selector: 'app-parent',
  template: `
    <app-dialog [columnDefinitions]="columnDefinitions"></app-dialog>
  `,
})
export class ParentComponent implements OnInit {
  columnDefinitions: any[] = [];

  constructor(private columnVisibilityService: ColumnVisibilityService) {}

  ngOnInit(): void {
    this.columnVisibilityService.columnVisibility$.subscribe((columns) => {
      // Handle the updated columnDefinitions when changes occur
      this.columnDefinitions = columns;
    });
  }
}
