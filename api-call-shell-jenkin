pipeline {
    agent any

    stages {
        stage('Fetch and Process API') {
            steps {
                script {
                    // Define your API endpoint
                    def apiUrl = 'http://your-api-endpoint'

                    // Use curl to make a GET request to the API
                    def apiResponse = sh(script: "curl -s $apiUrl", returnStdout: true).trim()

                    // Log the API response for debugging (optional)
                    echo "API Response: ${apiResponse}"

                    // Use jq to parse and process the JSON response
                    def jsonResponse = sh(script: "echo '$apiResponse' | jq .", returnStdout: true).trim()

                    // Log the processed JSON (optional)
                    echo "Processed JSON: ${jsonResponse}"

                    // Further processing or actions based on the JSON response
                    // For example, you can use variables from the JSON in subsequent steps
                    def someValue = sh(script: "echo '$jsonResponse' | jq -r '.someKey'", returnStdout: true).trim()
                    echo "Value from JSON: ${someValue}"

                    // Continue with additional pipeline steps as needed
                }
            }
        }
    }
}

--------------------
pipeline {
    agent any

    stages {
        stage('API 1') {
            steps {
                script {
                    try {
                        echo 'Running API 1'
                        // Add your API 1 script or command here

                        // Simulate a failure for demonstration purposes
                        // Uncomment the line below to simulate a failure
                        // error 'Simulating API 1 failure'
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        echo "API 1 failed: ${e.getMessage()}"
                        // Log additional details if needed
                        echo "Additional Details: ${e.getStackTrace().join('\n')}"
                    }
                }
            }
        }

        // Add similar stages for other APIs

        stage('Cleanup') {
            steps {
                echo 'Performing Cleanup'
                // Optionally, add cleanup steps or finalization tasks
            }
        }
    }

    post {
        success {
            echo 'All APIs executed successfully'
            // Optionally, add post-success steps or notifications
        }
        failure {
            echo 'One or more APIs failed'
            // Optionally, add post-failure steps or notifications

            // Send email notification on failure
            emailext subject: "Pipeline Failed: ${currentBuild.fullDisplayName}",
                      body: "One or more APIs failed. Check Jenkins for details.",
                      to: 'your-email@example.com',
                      replyTo: 'jenkins@example.com',
                      mimeType: 'text/plain'
        }
    }
}


def apiBasePath = 'http://your-api-base-path'
def apiEndpoints = ['/api/endpoint1', '/api/endpoint2', '/api/endpoint3', '/api/endpoint4', '/api/endpoint5', '/api/endpoint6', '/api/endpoint7', '/api/endpoint8']
def apiCallFailed = false

pipeline {
    agent any

    stages {
        stage('API Calls') {
            steps {
                script {
                    apiEndpoints.each { endpoint ->
                        def apiUrl = "${apiBasePath}${endpoint}"
                        echo "Making API call to: ${apiUrl}"
                        
                        try {
                            // Your API call using apiUrl
                            // If an exception occurs, it will be caught and the loop will continue
                        } catch (Exception e) {
                            apiCallFailed = true
                            echo "API call failed: ${e.getMessage()}"
                            // Log additional details if needed
                            echo "Additional Details: ${e.getStackTrace().join('\n')}"
                        }
                    }
                }
            }
        }

        // Add other stages as needed

        stage('Cleanup') {
            steps {
                echo 'Performing Cleanup'
                // Optionally, add cleanup steps or finalization tasks
            }
        }
    }

    post {
        always {
            script {
                if (apiCallFailed) {
                    currentBuild.result = 'FAILURE'
                    echo 'One or more API calls failed'
                    // Send email notification indicating API call failure
                    emailext subject: "Pipeline Failed: ${currentBuild.fullDisplayName}",
                              body: "One or more API calls failed. Check Jenkins for details.",
                              to: 'your-email@example.com',
                              replyTo: 'jenkins@example.com',
                              mimeType: 'text/plain'
                } else {
                    echo 'All API calls executed successfully'
                    // Optionally, add post-success steps or notifications
                }
            }
        }
    }
}


Jenkins Job Schedule Documentation
Overview
This document provides a detailed guide on setting up and configuring a Jenkins job schedule for running API calls using a Jenkinsfile. The job is scheduled to run daily at 4 PM.

Prerequisites
Jenkins instance is set up and accessible.
API endpoints are defined and accessible.
Jenkins Pipeline job is created.
Jenkins Pipeline Script
Jenkinsfile
groovy
Copy code
def apiBasePath = 'http://your-api-base-path'
def apiEndpoints = ['/api/endpoint1', '/api/endpoint2', '/api/endpoint3', '/api/endpoint4', '/api/endpoint5', '/api/endpoint6', '/api/endpoint7', '/api/endpoint8']
def apiCallFailed = false

pipeline {
    agent any

    stages {
        stage('API Calls') {
            steps {
                script {
                    apiEndpoints.each { endpoint ->
                        def apiUrl = "${apiBasePath}${endpoint}"
                        echo "Making API call to: ${apiUrl}"
                        
                        try {
                            // Your API call using apiUrl
                            // If an exception occurs, it will be caught and the loop will continue
                        } catch (Exception e) {
                            apiCallFailed = true
                            echo "API call failed: ${e.getMessage()}"
                            // Log additional details if needed
                            echo "Additional Details: ${e.getStackTrace().join('\n')}"
                        }
                    }
                }
            }
        }

        // Add other stages as needed

        stage('Cleanup') {
            steps {
                echo 'Performing Cleanup'
                // Optionally, add cleanup steps or finalization tasks
            }
        }
    }

    post {
        always {
            script {
                if (apiCallFailed) {
                    currentBuild.result = 'FAILURE'
                    echo 'One or more API calls failed'
                    // Send email notification indicating API call failure
                    emailext subject: "Pipeline Failed: ${currentBuild.fullDisplayName}",
                              body: "One or more API calls failed. Check Jenkins for details.",
                              to: 'your-email@example.com',
                              replyTo: 'jenkins@example.com',
                              mimeType: 'text/plain'
                } else {
                    echo 'All API calls executed successfully'
                    // Optionally, add post-success steps or notifications
                }
            }
        }
    }
}
Configuration Steps
Jenkins Job Configuration:

Create a new Jenkins Pipeline job.
Configure the job with the provided Jenkinsfile.
Set up any necessary credentials for API authentication.
Schedule Configuration:

In the job configuration, enable the "Build periodically" option.
Set the cron expression to 0 16 * * * to schedule the job daily at 4 PM.
API Endpoints:

Define the API endpoints in the apiEndpoints list in the Jenkinsfile.
Additional Configuration (Optional):

Customize the script according to project-specific requirements.
Adjust email notification settings as needed.
Monitoring and Troubleshooting
Monitor Jenkins job logs for any issues during API calls.
Investigate individual API call failures using the provided error details.
Adjust the script as needed for new API endpoints or changes in requirements.



pipeline {
    agent any

    environment {
        MSAL_CLIENT_ID = 'your-msal-client-id'
        MSAL_AUTHORITY = 'https://login.microsoftonline.com/your-tenant-id'
        MSAL_SCOPE = 'api://your-api-app-id/.default'
        MSAL_CLIENT_SECRET = credentials('your-credential-id')
    }

    stages {
        stage('Authenticate') {
            steps {
                script {
                    def tokenResponse = bat(script: """
                        curl -X POST -H "Content-Type: application/x-www-form-urlencoded" \
                        -d "client_id=${MSAL_CLIENT_ID}&scope=${MSAL_SCOPE}&client_secret=${MSAL_CLIENT_SECRET}&grant_type=client_credentials" \
                        ${MSAL_AUTHORITY}/oauth2/v2.0/token
                    """, returnStatus: true, returnStdout: true).trim()

                    def accessToken = readJSON(text: tokenResponse).access_token

                    // Set the access token as an environment variable
                    env.MSAL_ACCESS_TOKEN = accessToken
                }
            }
        }

        stage('API Calls') {
            steps {
                script {
                    def apiUrl = 'http://your-api-endpoint'
                    def response = sh(script: "curl -H 'Authorization: Bearer ${env.MSAL_ACCESS_TOKEN}' ${apiUrl}", returnStatus: true).trim()

                    if (response == 200) {
                        echo 'API call succeeded'
                    } else {
                        error "API call failed with status code ${response}"
                    }
                }
            }
        }

        // Add other stages as needed
    }
}


#!/bin/bash

# MSAL Authentication Parameters
MSAL_CLIENT_ID="your-msal-client-id"
MSAL_CLIENT_SECRET="your-msal-client-secret"
MSAL_AUTHORITY="https://login.microsoftonline.com/your-tenant-id"
MSAL_SCOPE="api://your-api-app-id/.default"

# MSAL Token Request
token_response=$(curl -s -X POST -H "Content-Type: application/x-www-form-urlencoded" \
    -d "client_id=${MSAL_CLIENT_ID}&scope=${MSAL_SCOPE}&client_secret=${MSAL_CLIENT_SECRET}&grant_type=client_credentials" \
    "${MSAL_AUTHORITY}/oauth2/v2.0/token")

# Extract Access Token from JSON Response
access_token=$(echo "${token_response}" | jq -r '.access_token')

# Check if Access Token is obtained successfully
if [ -n "${access_token}" ]; then
    echo "Access Token Obtained: ${access_token}"

    # Use the Access Token in API call
    api_url="http://your-api-endpoint"
    api_response=$(curl -s -H "Authorization: Bearer ${access_token}" "${api_url}")

    # Process API Response as needed
    echo "API Response: ${api_response}"
else
    echo "Failed to obtain Access Token"
fi



pipeline {
    agent any

    environment {
        MSAL_CLIENT_ID = 'your-msal-client-id'
        MSAL_CLIENT_SECRET = credentials('your-msal-client-secret-credential-id')
        MSAL_AUTHORITY = 'https://login.microsoftonline.com/your-tenant-id'
        MSAL_SCOPE = 'api://your-api-app-id/.default'
        API_ENDPOINT = 'http://your-api-endpoint'
    }

    stages {
        stage('MSAL Authentication') {
            steps {
                script {
                    // MSAL Token Request
                    def tokenResponse = sh(script: """
                        curl -s -X POST -H "Content-Type: application/x-www-form-urlencoded" \
                        -d "client_id=${MSAL_CLIENT_ID}&scope=${MSAL_SCOPE}&client_secret=${MSAL_CLIENT_SECRET}&grant_type=client_credentials" \
                        "${MSAL_AUTHORITY}/oauth2/v2.0/token"
                    """, returnStdout: true).trim()

                    // Extract Access Token from JSON Response
                    def accessToken = readJSON(text: tokenResponse).access_token

                    // Set the access token as an environment variable
                    env.MSAL_ACCESS_TOKEN = accessToken
                }
            }
        }

        stage('API Call') {
            steps {
                script {
                    // Use the Access Token in API call
                    def apiResponse = sh(script: """
                        curl -s -H "Authorization: Bearer ${env.MSAL_ACCESS_TOKEN}" "${API_ENDPOINT}"
                    """, returnStdout: true).trim()

                    echo "API Response: ${apiResponse}"
                }
            }
        }

        // Add other stages as needed
    }
}
