<mat-table [dataSource]="dataSource" matSort class="mat-elevation-z8">
  <!-- "Select All" column -->
  <ng-container matColumnDef="select">
    <mat-header-cell *matHeaderCellDef>
      <mat-checkbox (change)="toggleAllSelection()">Select All</mat-checkbox>
    </mat-header-cell>
    <mat-cell *matCellDef="let row">
      <mat-checkbox (click)="$event.stopPropagation()" (change)="toggleSelection(row)"></mat-checkbox>
    </mat-cell>
  </ng-container>

  <!-- Other data columns (e.g., name, age, etc.) -->
  <ng-container *ngFor="let column of displayedColumns" [matColumnDef]="column">
    <mat-header-cell *matHeaderCellDef mat-sort-header>
      {{ column }}
      <mat-form-field class="filter-input">
        <input matInput (keyup)="applyFilter($event.target.value, column)" placeholder="Filter">
      </mat-form-field>
    </mat-header-cell>
    <mat-cell *matCellDef="let row">{{ row[column] }}</mat-cell>
  </ng-container>

  <mat-header-row *matHeaderRowDef="displayedColumns"></mat-header-row>
  <mat-row *matRowDef="let row; columns: displayedColumns"></mat-row>
</mat-table>

<mat-paginator [pageSizeOptions]="[5, 10, 25]" showFirstLastButtons></mat-paginator>


import { Component, OnInit, ViewChild } from '@angular/core';
import { MatTableDataSource } from '@angular/material/table';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';

@Component({
  selector: 'app-data-table',
  templateUrl: './data-table.component.html',
  styleUrls: ['./data-table.component.css']
})
export class DataTableComponent implements OnInit {
  displayedColumns: string[] = ['select', 'name', 'age', 'city']; // Define your columns here
  dataSource: MatTableDataSource<any>;
  @ViewChild(MatPaginator) paginator: MatPaginator;
  @ViewChild(MatSort) sort: MatSort;

  // Sample data
  data = [
    { name: 'John', age: 30, city: 'New York' },
    { name: 'Alice', age: 25, city: 'Los Angeles' },
    // Add more data
  ];

  constructor() {
    this.dataSource = new MatTableDataSource(this.data);
  }

  ngOnInit() {
    this.dataSource.paginator = this.paginator;
    this.dataSource.sort = this.sort;
  }

  applyFilter(filterValue: string, columnName: string) {
    this.dataSource.filterPredicate = (data, filter) =>
      data[columnName].toLowerCase().includes(filter);
    this.dataSource.filter = filterValue.trim().toLowerCase();
  }

  toggleSelection(row) {
    row.selected = !row.selected;
  }

  toggleAllSelection() {
    this.data.forEach((row) => (row.selected = !row.selected));
  }
}




.filter-input {
  width: 100%;
  max-width: 150px; /* Adjust as needed */
}



<mat-table [dataSource]="dataSource" class="mat-elevation-z8">
  <ng-container *ngFor="let column of displayedColumns; let i = index" [matColumnDef]="column">
    <mat-header-cell *matHeaderCellDef>
      {{ column }}
      <mat-icon *ngIf="i === 0" matSort [matSortHeader]="i === 0 ? sort : null">arrow_upward</mat-icon>
      <mat-icon *ngIf="i === 1" matSort [matSortHeader]="i === 1 ? sort : null">arrow_upward</mat-icon>
      <!-- Add more icons as needed for other columns -->
    </mat-header-cell>
    <mat-cell *matCellDef="let row">{{ row[column] }}</mat-cell>
  </ng-container>

  <!-- Custom filtering row -->
  <ng-container matColumnDef="filtering">
    <mat-header-cell *matHeaderCellDef colspan="{{ displayedColumns.length }}">
      <!-- Add filtering controls (e.g., date picker, search input) here -->
    </mat-header-cell>
  </ng-container>

  <mat-header-row *matHeaderRowDef="displayedColumns"></mat-header-row>
  <mat-header-row *matHeaderRowDef="['filtering']"></mat-header-row>
  <mat-row *matRowDef="let row; columns: displayedColumns"></mat-row>
</mat-table>


import { Component, OnInit, ViewChild } from '@angular/core';
import { MatTableDataSource } from '@angular/material/table';
import { MatSort } from '@angular/material/sort';

@Component({
  selector: 'app-data-table',
  templateUrl: './data-table.component.html',
  styleUrls: ['./data-table.component.css']
})
export class DataTableComponent implements OnInit {
  displayedColumns: string[] = ['name', 'age', 'city']; // Define your columns here
  dataSource: MatTableDataSource<any>;
  @ViewChild(MatSort) sort: MatSort;

  // Sample data
  data = [
    { name: 'John', age: 30, city: 'New York' },
    { name: 'Alice', age: 25, city: 'Los Angeles' },
    // Add more data
  ];

  constructor() {
    this.dataSource = new MatTableDataSource(this.data);
  }

  ngOnInit() {
    this.dataSource.sort = this.sort;
  }
}


<!-- In the table's filter row, add a filter input for each column -->
<mat-header-row *matHeaderRowDef="displayedColumns"></mat-header-row>
<mat-header-row *matHeaderRowDef="['filtering']"></mat-header-row>



import { Component, OnInit, ViewChild } from '@angular/core';
import { MatTableDataSource } from '@angular/material/table';
import { MatSort } from '@angular/material/sort';

@Component({
  selector: 'app-data-table',
  templateUrl: './data-table.component.html',
  styleUrls: ['./data-table.component.css']
})
export class DataTableComponent implements OnInit {
  displayedColumns: string[] = ['name', 'age', 'city']; // Define your columns here
  dataSource: MatTableDataSource<any>;
  @ViewChild(MatSort) sort: MatSort;

  // Sample data
  data = [
    { name: 'John', age: 30, city: 'New York' },
    { name: 'Alice', age: 25, city: 'Los Angeles' },
    // Add more data
  ];

  constructor() {
    this.dataSource = new MatTableDataSource(this.data);
  }

  ngOnInit() {
    this.dataSource.sort = this.sort;
  }

  applyFilter(filterValue: string) {
    filterValue = filterValue.trim().toLowerCase(); // Convert filter value to lowercase
    this.dataSource.filter = filterValue;
  }
}


<!-- Add a dropdown/select element for choosing the column to filter -->
<mat-form-field>
  <mat-label>Filter by Column</mat-label>
  <mat-select [(ngModel)]="selectedColumn">
    <mat-option *ngFor="let column of displayedColumns" [value]="column">{{ column }}</mat-option>
  </mat-select>
</mat-form-field>
<mat-form-field>
  <input matInput (keyup)="applyFilter(filterValue)" placeholder="Filter">
</mat-form-field>


import { Component, OnInit, ViewChild } from '@angular/core';
import { MatTableDataSource } from '@angular/material/table';
import { MatSort } from '@angular/material/sort';

@Component({
  selector: 'app-data-table',
  templateUrl: './data-table.component.html',
  styleUrls: ['./data-table.component.css']
})
export class DataTableComponent implements OnInit {
  displayedColumns: string[] = ['name', 'age', 'city']; // Define your columns here
  dataSource: MatTableDataSource<any>;
  selectedColumn: string; // Stores the selected column for filtering
  filterValue: string; // Stores the filter value

  // Sample data
  data = [
    { name: 'John', age: 30, city: 'New York' },
    { name: 'Alice', age: 25, city: 'Los Angeles' },
    // Add more data
  ];

  constructor() {
    this.dataSource = new MatTableDataSource(this.data);
  }

  ngOnInit() {
    // Initialize the selected column to the first column in the list
    this.selectedColumn = this.displayedColumns[0];
  }

  applyFilter(filterValue: string) {
    this.filterValue = filterValue.trim().toLowerCase();
    this.dataSource.filter = JSON.stringify({ [this.selectedColumn]: this.filterValue });
  }
}





--------------

<mat-form-field>
  <mat-label>Filter by Column</mat-label>
  <mat-select [(ngModel)]="selectedColumn">
    <mat-option *ngFor="let column of displayedColumns" [value]="column">{{ column }}</mat-option>
  </mat-select>
</mat-form-field>
<mat-form-field>
  <input matInput (keyup)="applyFilter(filterValue)" placeholder="Filter">
</mat-form-field>

<mat-table [dataSource]="dataSource" matSort class="mat-elevation-z8">
  <ng-container *ngFor="let column of displayedColumns; let i = index" [matColumnDef]="column">
    <mat-header-cell *matHeaderCellDef>
      {{ column }}
      <mat-icon *ngIf="i === 0" matSort [matSortHeader]="i === 0 ? sort : null">arrow_upward</mat-icon>
      <mat-icon *ngIf="i === 1" matSort [matSortHeader]="i === 1 ? sort : null">arrow_upward</mat-icon>
    </mat-header-cell>
    <mat-cell *matCellDef="let row">{{ row[column] }}</mat-cell>
  </ng-container>

  <mat-header-row *matHeaderRowDef="displayedColumns"></mat-header-row>
  <mat-row *matRowDef="let row; columns: displayedColumns"></mat-row>
</mat-table>



import { Component, OnInit, ViewChild } from '@angular/core';
import { MatTableDataSource } from '@angular/material/table';
import { MatSort } from '@angular/material/sort';

@Component({
  selector: 'app-data-table',
  templateUrl: './data-table.component.html',
  styleUrls: ['./data-table.component.css']
})
export class DataTableComponent implements OnInit {
  displayedColumns: string[] = ['name', 'age', 'city']; // Define your columns here
  dataSource: MatTableDataSource<any>;
  @ViewChild(MatSort) sort: MatSort;
  selectedColumn: string; // Stores the selected column for filtering
  filterValue: string; // Stores the filter value

  // Sample data
  data = [
    { name: 'John', age: 30, city: 'New York' },
    { name: 'Alice', age: 25, city: 'Los Angeles' },
    // Add more data
  ];

  constructor() {
    this.dataSource = new MatTableDataSource(this.data);
  }

  ngOnInit() {
    // Initialize the selected column to the first column in the list
    this.selectedColumn = this.displayedColumns[0];
    this.dataSource.sort = this.sort;
  }

  applyFilter(filterValue: string) {
    this.filterValue = filterValue.trim().toLowerCase();
    this.dataSource.filter = JSON.stringify({ [this.selectedColumn]: this.filterValue });
  }
}


<table mat-table [dataSource]="dataSource" class="mat-elevation-z8">
  <!-- Loop through the column definitions and generate table columns -->
  <ng-container *ngFor="let column of columnDefinitions">
    <ng-container [matColumnDef]="column.columnName">
      <th mat-header-cell *matHeaderCellDef> {{ column.displayName }} </th>
      <td mat-cell *matCellDef="let element"> {{ element[column.columnName] }} </td>
    </ng-container>
  </ng-container>

  <!-- Header and row definitions -->
  <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
  <tr mat-row *matRowDef="let row; columns: displayedColumns"></tr>
</table>

<table mat-table [dataSource]="dataSource" class="mat-elevation-z8">
  <!-- First row of headers for sorting -->
  <ng-container *ngFor="let column of columnDefinitions" [matColumnDef]="column.columnName">
    <th mat-header-cell *matHeaderCellDef mat-sort-header>
      {{ column.displayName }}
    </th>
    <td mat-cell *matCellDef="let element">
      {{ element[column.columnName] }}
    </td>
  </ng-container>

  <!-- Second row of headers for filtering -->
  <ng-container *ngFor="let column of columnDefinitions" [matColumnDef]="column.columnName">
    <th mat-header-cell *matHeaderCellDef>
      <mat-form-field *ngIf="column.filterable" appearance="fill">
        <input matInput (keyup)="applyFilter($event.target.value, column.columnName)" placeholder="Filter">
      </mat-form-field>
    </th>
    <td mat-cell *matCellDef="let element"></td>
  </ng-container>

  <!-- Header and row definitions -->
  <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
  <tr mat-row *matRowDef="let row; columns: displayedColumns"></tr>
</table>

<table mat-table [dataSource]="dataSource" class="mat-elevation-z8">

  <!-- Custom header row with sorting and filtering headers -->
  <ng-container matColumnDef="headerRow">
    <th mat-header-cell *matHeaderCellDef></th>
    <th mat-header-cell *matHeaderCellDef></th>
  </ng-container>

  <!-- Define your columns -->
  <ng-container *ngFor="let column of columnDefinitions" [matColumnDef]="column.columnName">
    <th mat-header-cell *matHeaderCellDef mat-sort-header>{{ column.displayName }}</th>
    <td mat-cell *matCellDef="let element">{{ element[column.columnName] }}</td>
  </ng-container>

  <!-- Row definitions -->
  <tr mat-header-row *matHeaderRowDef="['headerRow']; columns: displayedColumns"></tr>
  <tr mat-row *matRowDef="let row; columns: displayedColumns"></tr>
  
  <!-- Filter controls row -->
  <tr mat-header-row *matHeaderRowDef="filterRow; columns: displayedColumns">
    <ng-container *ngFor="let column of columnDefinitions" [matColumnDef]="column.columnName">
      <th mat-header-cell *matHeaderCellDef>
        <mat-form-field *ngIf="column.filterable" appearance="fill">
          <input matInput (keyup)="applyFilter($event.target.value, column.columnName)" placeholder="Filter">
        </mat-form-field>
      </th>
    </ng-container>
  </tr>
</table>


<table mat-table [dataSource]="dataSource" class="mat-elevation-z8">

  <!-- First row of headers for sorting -->
  <ng-container *ngFor="let column of columnDefinitions" [matColumnDef]="column.columnName">
    <th mat-header-cell *matHeaderCellDef mat-sort-header>{{ column.displayName }}</th>
  </ng-container>

  <!-- Second row of headers for filtering -->
  <ng-container *ngFor="let column of columnDefinitions" [matColumnDef]="column.columnName + 'Filter'">
    <th mat-header-cell *matHeaderCellDef>
      <mat-form-field appearance="fill">
        <input matInput (keyup)="applyFilter($event.target.value, column.columnName)" placeholder="Filter">
      </mat-form-field>
    </th>
  </ng-container>

  <!-- Row definitions -->
  <tr mat-header-row *matHeaderRowDef="displayedColumns; sticky: true"></tr>
  <tr mat-header-row *matHeaderRowDef="filterColumns; sticky: true"></tr>
  <tr mat-row *matRowDef="let row; columns: displayedColumns"></tr>
</table>

