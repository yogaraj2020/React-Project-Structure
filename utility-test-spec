// import statements for the functions to test
import { addDate, dateDiff, downloadPDF } from './util';

describe('Util Functions', () => {
  describe('addDate', () => {
    it('should add the given number of days to the input date', () => {
      const inputDate = new Date('2023-12-21');
      const daysToAdd = 5;
      const result = addDate(inputDate, daysToAdd);
      const expectedDate = new Date('2023-12-26');
      expect(result).toEqual(expectedDate);
    });
  });

  describe('dateDiff', () => {
    it('should return the difference in days between two dates', () => {
      const date1 = new Date('2023-12-21');
      const date2 = new Date('2023-12-25');
      const result = dateDiff(date1, date2);
      const expectedDiff = 4;
      expect(result).toEqual(expectedDiff);
    });
  });

  import { downloadPDF } from './util';

describe('Util Functions', () => {
  describe('downloadPDF', () => {
    it('should trigger the download of a PDF file', () => {
      // Mocking HTML element and file name
      const htmlElement = document.createElement('div');
      const fileName = 'test.pdf';

      // Spy on window.open to check if it's called with correct parameters
      spyOn(window, 'open');

      // Call downloadPDF function with mocked parameters
      downloadPDF(htmlElement, fileName);

      // Expect window.open to be called with correct parameters
      expect(window.open).toHaveBeenCalledWith('data:application/pdf;base64,', fileName);
    });
  });
});
import { downloadPDF } from './util';
import * as jsPDF from 'jspdf';

describe('Util Functions', () => {
  describe('downloadPDF', () => {
    it('should trigger the download of a PDF file', () => {
      // Mock HTML element and file name
      const htmlElement = document.createElement('div');
      const fileName = 'test.pdf';

      // Spy on jsPDF's constructor to mock its behavior
      spyOn(jsPDF, 'default').and.callFake(() => {
        return {
          addImage: () => {},
          save: jasmine.createSpy('save')
        };
      });

      // Call downloadPDF function with mocked parameters
      downloadPDF(htmlElement, fileName);

      // Expect jsPDF's save method to be called with the correct file name
      expect(jsPDF.default().save).toHaveBeenCalledWith(fileName);
    });
  });
import { downloadPDF } from './util';
import * as jsPDF from 'jspdf';

describe('Util Functions', () => {
  describe('downloadPDF', () => {
    it('should trigger the download of a PDF file', () => {
      // Mock HTML element and file name
      const htmlElement = document.createElement('div');
      const fileName = 'test.pdf';

      // Spy on jsPDF's constructor to mock its behavior
      const jsPDFInstance = jasmine.createSpyObj('jsPDFInstance', ['addImage', 'save']);
      spyOn(jsPDF, 'default').and.returnValue(jsPDFInstance);

      // Call downloadPDF function with mocked parameters
      downloadPDF(htmlElement, fileName);

      // Expect jsPDF's save method to be called with the correct file name
      expect(jsPDFInstance.save).toHaveBeenCalledWith(fileName);
    });
  });
import { downloadPDF } from './util';

describe('Util Functions', () => {
  describe('downloadPDF', () => {
    it('should attempt to create a PDF with the given HTML element and file name', () => {
      const htmlElement = document.createElement('div');
      const fileName = 'test.pdf';
      
      spyOn(document, 'createElement').and.returnValue(htmlElement);
      spyOn(htmlElement, 'toDataURL').and.returnValue('data:image/png;base64,...');
      spyOn(htmlElement, 'clientHeight').and.returnValue(100);
      spyOn(htmlElement, 'clientWidth').and.returnValue(200);
      spyOn(window, 'open');

      downloadPDF(htmlElement, fileName);

      expect(document.createElement).toHaveBeenCalledWith('canvas');
      expect(htmlElement.toDataURL).toHaveBeenCalled();
      expect(window.open).toHaveBeenCalled();
    });
  });
import { downloadPDF } from './util';
import * as html2canvas from 'html2canvas';

describe('Util Functions', () => {
  describe('downloadPDF', () => {
    it('should attempt to create a PDF with the given HTML element and file name', () => {
      const htmlElement = document.createElement('div');
      const fileName = 'test.pdf';
      const canvasMock = document.createElement('canvas');
      
      spyOn(document, 'createElement').and.returnValue(canvasMock);
      spyOn(canvasMock, 'getContext').and.returnValue({} as CanvasRenderingContext2D); // Mock getContext
      spyOn(html2canvas, 'default').and.returnValue(Promise.resolve(canvasMock)); // Mock html2canvas

      spyOn(window, 'open');

      downloadPDF(htmlElement, fileName);

      expect(document.createElement).toHaveBeenCalledWith('canvas');
      expect(html2canvas.default).toHaveBeenCalledWith(htmlElement, { scale: 2 }); // Ensure html2canvas is called with the correct arguments
      expect(window.open).toHaveBeenCalled();
    });
  });
import { downloadPDF } from './util';
import * as html2canvas from 'html2canvas';
import * as jsPDF from 'jspdf';

describe('Util Functions', () => {
  describe('downloadPDF', () => {
    it('should attempt to create a PDF with the given HTML element and file name', async () => {
      const htmlElement = document.createElement('div');
      const fileName = 'test.pdf';
      const canvasMock = document.createElement('canvas');
      
      spyOn(document, 'createElement').and.returnValue(canvasMock);
      spyOn(canvasMock, 'getContext').and.returnValue({} as CanvasRenderingContext2D); // Mock getContext

      // Mock html2canvas to return a canvas
      spyOn(html2canvas, 'default').and.returnValue(Promise.resolve(canvasMock));

      // Spy on jsPDF's constructor to mock its behavior
      const jsPDFInstance = jasmine.createSpyObj('jsPDFInstance', ['addImage', 'save']);
      spyOn(jsPDF, 'default').and.returnValue(jsPDFInstance);

      await downloadPDF(htmlElement, fileName);

      expect(document.createElement).toHaveBeenCalledWith('canvas');
      expect(html2canvas.default).toHaveBeenCalledWith(htmlElement);
      expect(jsPDFInstance.addImage).toHaveBeenCalledWith(canvasMock, 'JPEG', 0, 0);
      expect(jsPDFInstance.save).toHaveBeenCalledWith(fileName);
    });
  });
import { downloadPDF } from './util';
import * as html2canvas from 'html2canvas';
import * as jsPDF from 'jspdf';

describe('Util Functions', () => {
  describe('downloadPDF', () => {
    it('should attempt to create a PDF with the given HTML element and file name', async () => {
      const htmlElement = document.createElement('div');
      const fileName = 'test.pdf';
      const canvasMock = document.createElement('canvas');
      
      spyOn(document, 'createElement').and.returnValue(canvasMock);
      spyOn(canvasMock, 'getContext').and.returnValue({} as CanvasRenderingContext2D); // Mock getContext

      // Mock html2canvas to return a canvas
      spyOn<any>(html2canvas, 'default').and.returnValue(Promise.resolve(canvasMock));

      // Spy on jsPDF's constructor to mock its behavior
      const jsPDFInstance = jasmine.createSpyObj('jsPDFInstance', ['addImage', 'save']);
      spyOn<any>(jsPDF, 'default').and.returnValue(jsPDFInstance);

      await downloadPDF(htmlElement, fileName);

      expect(document.createElement).toHaveBeenCalledWith('canvas');
      expect(html2canvas.default).toHaveBeenCalledWith(htmlElement);
      expect(jsPDFInstance.addImage).toHaveBeenCalledWith(canvasMock, 'JPEG', 0, 0);
      expect(jsPDFInstance.save).toHaveBeenCalledWith(fileName);
    });
  });
});
import { downloadPDF } from './util';
import * as html2canvas from 'html2canvas';
import * as jsPDF from 'jspdf';

describe('Util Functions', () => {
  describe('downloadPDF', () => {
    it('should attempt to create a PDF with the given HTML element and file name', fakeAsync(() => {
      const chartSection = document.createElement('div');
      chartSection.id = 'chartSection'; // assuming 'chartSection' is the id of the HTML element to be converted to PDF
      const fileName = 'graph.pdf';
      const canvasMock = document.createElement('canvas');
      const imgData = 'data:image/png;base64,...'; // Mocked image data

      spyOn(document, 'createElement').and.returnValue(canvasMock);
      spyOn(canvasMock, 'getContext').and.returnValue({} as CanvasRenderingContext2D); // Mock getContext

      spyOn<any>(html2canvas, 'default').and.returnValue(Promise.resolve(canvasMock));
      spyOn(jsPDF, 'default').and.callFake(() => {
        return {
          addImage: jasmine.createSpy('addImage'),
          save: jasmine.createSpy('save')
        };
      });

      let promiseResolved = false;
      downloadPDF(chartSection, fileName).then(() => {
        promiseResolved = true;
      });

      flushMicrotasks();

      expect(document.createElement).toHaveBeenCalledWith('canvas');
      expect(html2canvas.default).toHaveBeenCalledWith(chartSection);
      expect(jsPDF.default).toHaveBeenCalled();

      expect(jsPDF.default().addImage).toHaveBeenCalledWith(imgData, 'PNG', 0, 0, jasmine.any(Number), jasmine.any(Number));
      expect(jsPDF.default().save).toHaveBeenCalledWith(fileName);

      // Ensure the promise is resolved
      expect(promiseResolved).toBeTrue();
    }));
  });
});
import { downloadPDF } from './util';
import * as html2canvas from 'html2canvas';
import * as jsPDF from 'jspdf';

describe('Util Functions', () => {
  describe('downloadPDF', () => {
    it('should generate and save a PDF with the given HTML element', async () => {
      // Mock HTML element
      const htmlElement = document.createElement('div');
      const chartSection = document.createElement('div');
      htmlElement.appendChild(chartSection);

      // Spy on html2canvas to mock its behavior
      spyOn(html2canvas, 'default').and.returnValue(Promise.resolve(document.createElement('canvas')));

      // Spy on jsPDF's constructor to mock its behavior
      const jsPDFInstance = jasmine.createSpyObj('jsPDFInstance', ['getImageProperties', 'addImage', 'save']);
      spyOn<any>(jsPDF, 'default').and.returnValue(jsPDFInstance);

      // Call the downloadPDF function
      await downloadPDF(chartSection, 'graph.pdf');

      // Verify interactions
      expect(html2canvas.default).toHaveBeenCalledWith(chartSection);
      expect(jsPDF.default).toHaveBeenCalled();
      expect(jsPDFInstance.addImage).toHaveBeenCalled();
      expect(jsPDFInstance.save).toHaveBeenCalledWith('graph.pdf');
    });
  });
});

