$("#btnODR").click(function () {
    hasProgressbar = false;

    // collect all rows first
    var allRows = [];
    $("#selectedMeters").DataTable().rows().every(function (rowIdx, tableLoop, rowLoop) {
        var rowData = this.data();
        var rowNode = this.node();
        allRows.push({
            meterId: rowData.MeterNumber,
            orgID: rowData.MDSOrganizationID,
            measurementProfile: rowData.VoltageMeasurementProfile,
            nominalVoltage: rowData.NominalVoltageRange,
            rowNodeId: $(rowNode).attr("id") // assuming each <tr> has id, else we assign one
        });
    });

    // process in batches
    processInBatches(allRows, 200);
});

function processInBatches(rows, batchSize) {
    let i = 0;

    function sendNextBatch() {
        if (i >= rows.length) return;

        let batch = rows.slice(i, i + batchSize);

        $.ajax({
            url: '/YourController/GetMeterReadStatuses', // new batch endpoint
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(batch),
            success: function (results) {
                // results = array of { rowNodeId, status, etc. }
                results.forEach(function (res) {
                    let $row = $("#" + res.rowNodeId);

                    // same UI update you had before:
                    loadRowDataForPingAndODR(res, $row[0], null);
                });

                i += batchSize;
                sendNextBatch(); // recursive until all done
            },
            error: function () {
                console.error("Batch failed at index " + i);
            }
        });
    }

    sendNextBatch();
}

function loadRowDataForPingAndODR(d, rowNode, control) {
    var odrNode = $(rowNode).children('td')[_readResultCol];
    var pingNode = $("#selectedMeters").DataTable().row(rowNode).nodes().children('td')[_pingResultCol];

    // update UI with response data
    if (d.status) {
        $(odrNode).html(d.status);
    }
    if (d.ping) {
        $(pingNode).html(d.ping);
    }
}

public class MeterRequest {
    public string MeterId { get; set; }
    public string OrgID { get; set; }
    public string MeasurementProfile { get; set; }
    public string NominalVoltage { get; set; }
    public string RowNodeId { get; set; }
}

public class MeterResponse {
    public string RowNodeId { get; set; }
    public string Status { get; set; }
    public string Ping { get; set; }
}

[HttpPost]
public JsonResult GetMeterReadStatuses(List<MeterRequest> requests)
{
    var results = new List<MeterResponse>();

    foreach (var req in requests)
    {
        // Your existing backend API call logic
        var status = BackendApiService.GetMeterReadStatus(
            req.MeterId, req.OrgID, req.MeasurementProfile, req.NominalVoltage);

        results.Add(new MeterResponse {
            RowNodeId = req.RowNodeId,
            Status = status,
            Ping = "OK" // add extra fields if needed
        });
    }

    return Json(results);
}
$("#btnODR").click(function () {
    var table = $("#selectedMeters").DataTable();

    var allRows = [];
    table.rows().every(function () {
        var rowData = this.data();
        var rowNode = this.node();

        console.log("RowData:", rowData); // ✅ debug
        console.log("RowNode:", rowNode); // ✅ debug

        if (rowData) {
            allRows.push({
                meterId: rowData.MeterNumber,
                orgID: rowData.MDSOrganizationID,
                measurementProfile: rowData.VoltageMeasurementProfile,
                nominalVoltage: rowData.NominalVoltageRange,
                rowNodeId: $(rowNode).attr("id") || ("row-" + rowData.MeterNumber)
            });

            // Ensure <tr> has an id
            $(rowNode).attr("id", "row-" + rowData.MeterNumber);
        }
    });

    console.log("AllRows collected:", allRows); // ✅ check length

    if (allRows.length > 0) {
        processInBatches(allRows, 200);
    } else {
        console.warn("⚠️ No rows found in DataTable");
    }
});







