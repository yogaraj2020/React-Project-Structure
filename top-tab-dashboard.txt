<div class="top-links">
  <a (click)="updateGridView('type1')" [class.active]="selectedType === 'type1'">Type 1</a>
  <a (click)="updateGridView('type2')" [class.active]="selectedType === 'type2'">Type 2</a>
  <a (click)="updateGridView('type3')" [class.active]="selectedType === 'type3'">Type 3</a>
  <!-- Add more links as needed -->
</div>



.top-links {
  display: flex;
  justify-content: space-around;
  align-items: center;

  a {
    text-decoration: none;
    color: #333; /* Default link color */
    padding: 10px;
    position: relative;

    &.active {
      color: green; /* Selected link text color */
    }

    &::after {
      content: '';
      position: absolute;
      width: 100%;
      height: 3px; /* Thickness of the underline */
      bottom: 0;
      left: 0;
      background-color: green; /* Selected link underline color */
      transform: scaleX(0); /* Initial width of the underline (hidden) */
      transform-origin: bottom right;
      transition: transform 0.3s ease; /* Smooth animation on hover */

      &.active {
        transform: scaleX(1); /* Fully display the underline on hover */
        transform-origin: bottom left;
      }
    }

    &:hover::after {
      transform: scaleX(1);
      transform-origin: bottom left;
    }
  }
}



import { Component, Output, EventEmitter } from '@angular/core';

@Component({
  selector: 'app-top-links',
  templateUrl: './top-links.component.html',
  styleUrls: ['./top-links.component.scss']
})
export class TopLinksComponent {
  @Output() typeSelected = new EventEmitter<string>();

  updateGridView(type: string) {
    this.typeSelected.emit(type);
  }
}



import { Component } from '@angular/core';

@Component({
  selector: 'app-dashboard',
  templateUrl: './dashboard.component.html',
  styleUrls: ['./dashboard.component.scss']
})
export class DashboardComponent {
  selectedType: string;

  updateGridView(type: string) {
    this.selectedType = type;
    // Call a method to update the grid view based on the selected type
  }
}


<app-top-links (typeSelected)="updateGridView($event)"></app-top-links>
<app-grid-view [selectedType]="selectedType"></app-grid-view>


<div class="filter-section">
  <div class="filter-header">Filter Options</div>
  <div class="filter-row">
    <div class="selected-filter-type">Filter Type: Type 1</div>
    <div class="selected-period">Period: 1 Week</div>
  </div>
  <div class="filter-row">
    <div class="filter-type-select">
      <label for="filterType">Filter Type:</label>
      <select id="filterType">
        <option value="type1">Type 1</option>
        <option value="type2">Type 2</option>
        <option value="type3">Type 3</option>
      </select>
    </div>
    <div class="period-select">
      <label for="period">Period:</label>
      <select id="period">
        <option value="1week">1 Week</option>
        <option value="2weeks">2 Weeks</option>
        <option value="1month">1 Month</option>
      </select>
    </div>
  </div>
</div>

