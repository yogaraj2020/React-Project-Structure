import { Pipe, PipeTransform } from '@angular/core';
import { DatePipe } from '@angular/common';

@Pipe({
  name: 'customDateFormat'
})
export class CustomDateFormatPipe implements PipeTransform {
  constructor(private datePipe: DatePipe) {}

  transform(value: any, format: string = 'yyyy-MM-dd'): string {
    if (value instanceof Date) {
      return this.datePipe.transform(value, format);
    } else if (typeof value === 'number') {
      // Handle number formatting as needed
      return value.toString();
    } else {
      // Handle other types or return an empty string
      return '';
    }
  }
}


function addTimeToDate(date: Date, amount: number, unit: 'days' | 'months' | 'years'): Date {
  const newDate = new Date(date.getTime());

  switch (unit) {
    case 'days':
      newDate.setDate(newDate.getDate() + amount);
      break;
    case 'months':
      newDate.setMonth(newDate.getMonth() + amount);
      break;
    case 'years':
      newDate.setFullYear(newDate.getFullYear() + amount);
      break;
    default:
      throw new Error(`Unsupported time unit: ${unit}`);
  }

  return newDate;
}

// Example usage:
const currentDate = new Date();
const futureDate = addTimeToDate(currentDate, 3, 'months');
const pastDate = addTimeToDate(currentDate, -2, 'years');

console.log(`Current Date: ${currentDate}`);
console.log(`Future Date (+3 months): ${futureDate}`);
console.log(`Past Date (-2 years): ${pastDate}`);
